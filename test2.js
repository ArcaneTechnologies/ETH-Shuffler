// Imports
let Web3 = require('web3');
let fs = require('fs')
let wlt = require('./src/wlt');

// Settings
let urlM = "https://mainnet.infura.io/v3/4ae1a7cf65794f9dbb5222f2e10316c8"
let urlR = "https://ropsten.infura.io/v3/4ae1a7cf65794f9dbb5222f2e10316c8"
let {accounts,personal,Contract} = new Web3(urlR).eth
let PrivKey1 = ''
let Address1 = ''
let PrivKey2 = ''
let Address2 = ''
let PrivKey3 = ''
let Address3 = ''

// Maincode
// Preliminary Step: Deploy Contract
// let Bytecode = '0x60806040526611c37937e0800060015534801561001b57600080fd5b50600060028190555060006003819055506109cf8061003b6000396000f3fe6080604052600436106100295760003560e01c806339e343ac1461002e5780636cf7d3551461004a575b600080fd5b61004860048036038101906100439190610531565b610075565b005b34801561005657600080fd5b5061005f61043a565b60405161006c919061064a565b60405180910390f35b808051600154610085919061071d565b3410156100c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100be9061062a565b60405180910390fd5b8180516001546100d7919061071d565b655af3107a40006100e891906106c7565b3410610129576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101209061060a565b60405180910390fd5b60005b83518160ff1610156101f1576000848260ff1681518110610176577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101519080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080806101e99061086e565b91505061012c565b50346002600082825461020491906106c7565b925050819055506003600081548092919061021e90610825565b919050555060038054141561043557600060038190555060005b6000805490508160ff1610156103755760008160ff1681548110610285577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc6001549081150290604051600060405180830381858888f193505050501580156102f7573d6000803e3d6000fd5b5060008160ff1681548110610335577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055808061036d9061086e565b915050610238565b506000610380610440565b905060008080549050600154610396919061071d565b6002546103a39190610777565b90508082146103e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103de906105ea565b60405180910390fd5b816002819055506000806103fb9190610448565b7f17129b44f2b0cf120df069009ce0c9bfb42e51ee601d0f604289c2f28b14f2208160405161042a919061064a565b60405180910390a150505b505050565b60015481565b600047905090565b50805460008255906000526020600020908101906104669190610469565b50565b5b8082111561048257600081600090555060010161046a565b5090565b60006104996104948461068a565b610665565b905080838252602082019050828560208602820111156104b857600080fd5b60005b858110156104e857816104ce88826104f2565b8452602084019350602083019250506001810190506104bb565b5050509392505050565b60008135905061050181610982565b92915050565b600082601f83011261051857600080fd5b8135610528848260208601610486565b91505092915050565b60006020828403121561054357600080fd5b600082013567ffffffffffffffff81111561055d57600080fd5b61056984828501610507565b91505092915050565b600061057f601e836106b6565b915061058a82610907565b602082019050919050565b60006105a2601b836106b6565b91506105ad82610930565b602082019050919050565b60006105c56019836106b6565b91506105d082610959565b602082019050919050565b6105e4816107dd565b82525050565b6000602082019050818103600083015261060381610572565b9050919050565b6000602082019050818103600083015261062381610595565b9050919050565b60006020820190508181036000830152610643816105b8565b9050919050565b600060208201905061065f60008301846105db565b92915050565b600061066f610680565b905061067b82826107f4565b919050565b6000604051905090565b600067ffffffffffffffff8211156106a5576106a46108c7565b5b602082029050602081019050919050565b600082825260208201905092915050565b60006106d2826107dd565b91506106dd836107dd565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561071257610711610898565b5b828201905092915050565b6000610728826107dd565b9150610733836107dd565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561076c5761076b610898565b5b828202905092915050565b6000610782826107dd565b915061078d836107dd565b9250828210156107a05761079f610898565b5b828203905092915050565b60006107b6826107bd565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6107fd826108f6565b810181811067ffffffffffffffff8211171561081c5761081b6108c7565b5b80604052505050565b6000610830826107dd565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561086357610862610898565b5b600182019050919050565b6000610879826107e7565b915060ff82141561088d5761088c610898565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f4552524f523a20496e7465726e616c205472616e73666572204572726f720000600082015250565b7f4552524f523a2046756e6473204f766572205468726573686f6c640000000000600082015250565b7f4552524f523a20496e73756666696369656e742046756e647300000000000000600082015250565b61098b816107ab565b811461099657600080fd5b5056fea264697066735822122074d5295552c9c482b0ae81413e2a534ae3d2e0e1c319a5b342f3ecce3329a4be64736f6c63430008040033'
// wlt.writeContract('ropsten',Address2,PrivKey2,Bytecode).then(console.log)

// Call Contract
let Users = [Address1,Address2,Address3]
let CJA = 0.005
Promise.all(Users.map(address => wlt.AccountBalance('ropsten',address))).then(info1 => {
  // Check Balances
  if (info1.filter(x => x<CJA).length !== 0) { throw Error('All Participants must be Funded') }
  console.log('--- ORIGINAL BALANCES ---');
  info1.forEach((bal,index) => {console.log(`${index+1}) ${bal} ETH`)})
  
  // Make 3 Accounts/Participant
  Promise.all(Users.map(address => wlt.makeDestAcc('ropsten',3*CJA,CJA))).then(info2 => {
    // Each User Stores their Destination Accounts
    console.log('--- DESTINATION ACCOUNTS ---')
    info2.forEach((DA,index) => {console.log(`${index+1})`,DA.map(acc => ({address: acc.address,privateKey: acc.privateKey})))})

    // Simulate Users Joining Shuffle
    let PK = [PrivKey1,PrivKey2,PrivKey3]
    let Funds = [3*CJA,3*CJA,3*CJA]
    let Addresses = info2.map(accArr => accArr.map(acc => acc.address))
    
    Promise.all(Users.map((address,idx) => wlt.joinShuffle('ropsten',address,PK[idx],Addresses[idx],Funds[idx]))).then(info3 => {
      // Each User can Track their Contract Call by Hash
      console.log('--- CONTRACT CALLS ---')
      info3.forEach((hash,index) => {console.log(`${index+1}) ${hash}`)})

      // Check Final Balances
      console.log('--- ACCOUNT BALANCES ---')
      info2.forEach((DA,index1) => {
        DA.forEach(async (acc,index2) => {
          console.log(`USER ${index1+1} - ACCOUNT ${index2+1})[${acc.address}]: ${await wlt.AccountBalance('ropsten',acc.address)} ETH`)
        })
      })
    })
  })
})
